generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(uuid())
  name                  String
  email                 String             @unique
  password              String
  role                  UserRole           @default(TECHNICIAN)
  status                UserStatus         @default(ACTIVE)
  avatar_url            String?
  phone                 String?
  department            String?
  position              String?
  preferences           Json?
  two_factor_enabled    Boolean            @default(false)
  recovery_codes        String[]           @default([])
  last_password_change  DateTime?
  sessions_count        Int                @default(0)
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  last_login_at         DateTime?
  created_invites       Invite[]           @relation("InviteCreator")
  created_plans         MaintenancePlan[]  @relation("PlanCreator")
  created_solicitations Solicitation[]     @relation("SolicitationCreator")
  stock_requisitions    StockRequisition[]
  assigned_work_orders  WorkOrder[]        @relation("WorkOrderAssignee")
  created_work_orders   WorkOrder[]        @relation("WorkOrderCreator")

  @@map("users")
}

model Company {
  id          String            @id @default(uuid())
  name        String
  segment     String?
  cnpj        String?           @unique
  address     Json?
  responsible String?
  role        String?
  phone       String?
  email       String?
  total_area  Int?
  occupants   Int?
  hvac_units  Int?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  equipment   Equipment[]
  plans       MaintenancePlan[]
  sectors     Sector[]
  work_orders WorkOrder[]

  @@map("companies")
}

model Sector {
  id           String            @id @default(uuid())
  name         String
  company_id   String
  description  String?
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  equipment    Equipment[]
  plans        MaintenancePlan[]
  company      Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  sub_sections SubSection[]
  work_orders  WorkOrder[]

  @@map("sectors")
}

model SubSection {
  id          String      @id @default(uuid())
  name        String
  sector_id   String
  description String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  equipment   Equipment[]
  sector      Sector      @relation(fields: [sector_id], references: [id], onDelete: Cascade)

  @@map("sub_sections")
}

model Equipment {
  id                String               @id @default(uuid())
  code              String               @unique
  name              String
  type              String
  manufacturer      String?
  model             String?
  serial_number     String?
  company_id        String
  sector_id         String
  sub_section_id    String?
  location          String?
  status            EquipmentStatus      @default(OPERATIONAL)
  criticality       EquipmentCriticality @default(MEDIUM)
  installation_date DateTime?
  warranty_expires  DateTime?
  specifications    Json?
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  company           Company              @relation(fields: [company_id], references: [id], onDelete: Cascade)
  sector            Sector               @relation(fields: [sector_id], references: [id], onDelete: Cascade)
  sub_section       SubSection?          @relation(fields: [sub_section_id], references: [id])
  plan_equipments   PlanEquipment[]
  work_orders       WorkOrderEquipment[]

  @@map("equipment")
}

model MaintenancePlan {
  id                  String          @id @default(uuid())
  name                String
  description         String?
  frequency           PlanFrequency
  company_id          String
  sector_id           String?
  tasks               Json
  auto_generate       Boolean         @default(true)
  next_execution_date DateTime?
  status              PlanStatus      @default(ACTIVE)
  start_date          DateTime?
  created_by          String
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  company             Company         @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator             User            @relation("PlanCreator", fields: [created_by], references: [id])
  sector              Sector?         @relation(fields: [sector_id], references: [id])
  equipment           PlanEquipment[]
  work_orders         WorkOrder[]

  @@map("maintenance_plans")
}

model PlanEquipment {
  id           String          @id @default(uuid())
  plan_id      String
  equipment_id String
  equipment    Equipment       @relation(fields: [equipment_id], references: [id], onDelete: Cascade)
  plan         MaintenancePlan @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  @@unique([plan_id, equipment_id])
  @@map("plan_equipment")
}

model WorkOrder {
  id               String                @id @default(uuid())
  code             String                @unique
  title            String
  description      String?
  type             WorkOrderType
  priority         WorkOrderPriority     @default(MEDIUM)
  status           WorkOrderStatus       @default(PENDING)
  company_id       String
  sector_id        String?
  plan_id          String?
  assigned_to      String?
  scheduled_date   DateTime?
  due_date         DateTime?
  started_at       DateTime?
  completed_at     DateTime?
  estimated_hours  Float?
  actual_hours     Float?
  tasks            Json
  notes            String?
  completion_notes String?
  created_by       String
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
  attachments      WorkOrderAttachment[]
  equipment        WorkOrderEquipment[]
  assignee         User?                 @relation("WorkOrderAssignee", fields: [assigned_to], references: [id])
  company          Company               @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator          User                  @relation("WorkOrderCreator", fields: [created_by], references: [id])
  plan             MaintenancePlan?      @relation(fields: [plan_id], references: [id])
  sector           Sector?               @relation(fields: [sector_id], references: [id])

  @@map("work_orders")
}

model WorkOrderEquipment {
  id            String    @id @default(uuid())
  work_order_id String
  equipment_id  String
  equipment     Equipment @relation(fields: [equipment_id], references: [id], onDelete: Cascade)
  work_order    WorkOrder @relation(fields: [work_order_id], references: [id], onDelete: Cascade)

  @@unique([work_order_id, equipment_id])
  @@map("work_order_equipment")
}

model WorkOrderAttachment {
  id            String    @id @default(uuid())
  work_order_id String
  filename      String
  original_name String
  mime_type     String
  size          Int
  file_path     String
  uploaded_at   DateTime  @default(now())
  work_order    WorkOrder @relation(fields: [work_order_id], references: [id], onDelete: Cascade)

  @@map("work_order_attachments")
}

model StockItem {
  id                String                 @id @default(uuid())
  code              String                 @unique
  name              String
  description       String?
  category          String?
  unit              String
  current_stock     Float                  @default(0)
  minimum_stock     Float                  @default(0)
  maximum_stock     Float?
  unit_price        Float?
  location          String?
  supplier          String?
  created_at        DateTime               @default(now())
  updated_at        DateTime               @updatedAt
  movements         StockMovement[]
  requisition_items StockRequisitionItem[]

  @@map("stock_items")
}

model StockMovement {
  id            String       @id @default(uuid())
  stock_item_id String
  type          MovementType
  quantity      Float
  unit_price    Float?
  reference     String?
  notes         String?
  created_at    DateTime     @default(now())
  stock_item    StockItem    @relation(fields: [stock_item_id], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}

model StockRequisition {
  id           String                 @id @default(uuid())
  code         String                 @unique
  description  String?
  status       RequisitionStatus      @default(PENDING)
  priority     RequisitionPriority    @default(NORMAL)
  requested_by String
  requested_at DateTime               @default(now())
  approved_by  String?
  approved_at  DateTime?
  delivered_by String?
  delivered_at DateTime?
  items        StockRequisitionItem[]
  requester    User                   @relation(fields: [requested_by], references: [id])

  @@map("stock_requisitions")
}

model StockRequisitionItem {
  id                 String           @id @default(uuid())
  requisition_id     String
  stock_item_id      String
  requested_quantity Float
  approved_quantity  Float?
  delivered_quantity Float?
  unit_price         Float?
  notes              String?
  requisition        StockRequisition @relation(fields: [requisition_id], references: [id], onDelete: Cascade)
  stock_item         StockItem        @relation(fields: [stock_item_id], references: [id], onDelete: Cascade)

  @@map("stock_requisition_items")
}

model Invite {
  id          String       @id @default(uuid())
  token       String       @unique
  email       String
  role        UserRole
  status      InviteStatus @default(PENDING)
  expires_at  DateTime
  created_by  String
  created_at  DateTime     @default(now())
  accepted_at DateTime?
  creator     User         @relation("InviteCreator", fields: [created_by], references: [id])

  @@map("invites")
}

model Solicitation {
  id             String               @id @default(uuid())
  code           String               @unique
  title          String
  description    String?
  status         SolicitationStatus   @default(NOVA)
  priority       SolicitationPriority @default(NORMAL)
  location       String?
  equipment_info String?
  created_by     String
  created_at     DateTime             @default(now())
  updated_at     DateTime             @updatedAt
  status_history Json
  items          SolicitationItem[]
  creator        User                 @relation("SolicitationCreator", fields: [created_by], references: [id])

  @@map("solicitations")
}

model SolicitationItem {
  id              String       @id @default(uuid())
  solicitation_id String
  description     String
  quantity        Float        @default(1)
  unit            String       @default("un")
  estimated_price Float?
  solicitation    Solicitation @relation(fields: [solicitation_id], references: [id], onDelete: Cascade)

  @@map("solicitation_items")
}

enum UserRole {
  ADMIN
  MANAGER
  TECHNICIAN
  OPERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum EquipmentStatus {
  OPERATIONAL
  MAINTENANCE
  STOPPED
  DECOMMISSIONED
}

enum EquipmentCriticality {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PlanFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMESTER
  YEARLY
}

enum PlanStatus {
  ACTIVE
  INACTIVE
}

enum WorkOrderType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WorkOrderPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

enum RequisitionStatus {
  PENDING
  APPROVED
  PARTIALLY_DELIVERED
  DELIVERED
  CANCELLED
}

enum RequisitionPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum SolicitationStatus {
  NOVA
  EM_TRIAGEM
  CONVERTIDA_EM_OS
}

enum SolicitationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
