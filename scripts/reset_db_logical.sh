#!/bin/bash

# Script para reset apenas do database l√≥gico (sem remover volumes)
# √ötil quando n√£o queremos perder configura√ß√µes do cluster PostgreSQL

set -e

# Configura√ß√µes
DB_SERVICE="db"
DB_NAME="traknor"
DB_USER="postgres"
DB_PASSWORD="postgres"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Fun√ß√£o para confirmar opera√ß√£o
confirm_reset() {
    warn "‚ö†Ô∏è  RESET DO DATABASE L√ìGICO ‚ö†Ô∏è"
    echo
    echo "Este script ir√°:"
    echo "  1. Dropar o database '$DB_NAME' (se existir)"
    echo "  2. Recriar o database '$DB_NAME'"
    echo "  3. PERDER todos os dados, mas manter configura√ß√µes do cluster"
    echo
    echo "NOTA: Este m√©todo N√ÉO redefine senhas do PostgreSQL."
    echo "      Para garantir senhas das vari√°veis de ambiente, use o reset completo."
    echo
    read -p "Deseja continuar? (s/N): " confirmation
    
    if [[ "$confirmation" != "s" && "$confirmation" != "S" ]]; then
        info "Opera√ß√£o cancelada pelo usu√°rio."
        exit 0
    fi
}

# Fun√ß√£o para verificar se PostgreSQL est√° rodando
check_postgres_running() {
    if ! docker compose ps $DB_SERVICE --format "table {{.State}}" | grep -q "running"; then
        log "Iniciando servi√ßo PostgreSQL..."
        docker compose up -d $DB_SERVICE
        
        # Aguarda ficar pronto
        local max_attempts=30
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if docker compose exec -T $DB_SERVICE pg_isready -U $DB_USER >/dev/null 2>&1; then
                log "‚úÖ PostgreSQL est√° pronto!"
                break
            fi
            
            info "Aguardando PostgreSQL... ($attempt/$max_attempts)"
            sleep 2
            attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
            error "PostgreSQL n√£o ficou pronto"
        fi
    else
        log "PostgreSQL j√° est√° rodando"
    fi
}

# Fun√ß√£o para resetar database l√≥gico
reset_database() {
    log "Resetando database l√≥gico '$DB_NAME'..."
    
    # Conecta ao database 'postgres' para poder dropar o database 'traknor'
    local drop_cmd="DROP DATABASE IF EXISTS $DB_NAME WITH (FORCE);"
    local create_cmd="CREATE DATABASE $DB_NAME;"
    
    # Executa drop database
    info "Dropando database '$DB_NAME'..."
    docker compose exec -T $DB_SERVICE psql -U $DB_USER -d postgres -c "$drop_cmd" || {
        error "Falha ao dropar database"
    }
    
    # Cria database novamente
    info "Criando database '$DB_NAME'..."
    docker compose exec -T $DB_SERVICE psql -U $DB_USER -d postgres -c "$create_cmd" || {
        error "Falha ao criar database"
    }
    
    log "‚úÖ Database '$DB_NAME' resetado com sucesso"
}

# Fun√ß√£o para testar a conex√£o
test_connection() {
    log "Testando conex√£o com o database..."
    
    local result=$(docker compose exec -T $DB_SERVICE \
        psql -U $DB_USER -d $DB_NAME -tAc "SELECT 'OK' as status;" 2>/dev/null || echo "ERRO")
    
    if [[ "$result" == "OK" ]]; then
        log "‚úÖ Conex√£o com database funcionando"
    else
        error "‚ùå Falha na conex√£o com database"
    fi
}

# Fun√ß√£o para aplicar migra√ß√µes Django
apply_migrations() {
    log "Aplicando migra√ß√µes Django..."
    
    # Verifica se backend est√° rodando
    if ! docker compose ps backend --format "table {{.State}}" | grep -q "running"; then
        log "Iniciando backend para aplicar migra√ß√µes..."
        docker compose up -d backend
        sleep 5
    fi
    
    # Aplica migra√ß√µes
    docker compose exec -T backend python manage.py migrate || {
        warn "Falha ao aplicar migra√ß√µes automaticamente"
        info "Execute manualmente: docker compose exec backend python manage.py migrate"
    }
    
    log "‚úÖ Migra√ß√µes aplicadas"
}

# Fun√ß√£o principal
main() {
    log "Iniciando reset do database l√≥gico..."
    
    # Confirma opera√ß√£o
    confirm_reset
    
    # Verifica se PostgreSQL est√° rodando
    check_postgres_running
    
    # Reset do database
    reset_database
    
    # Testa conex√£o
    test_connection
    
    # Aplica migra√ß√µes
    apply_migrations
    
    log "üéâ Reset do database l√≥gico conclu√≠do!"
}

# Executa o script principal
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
