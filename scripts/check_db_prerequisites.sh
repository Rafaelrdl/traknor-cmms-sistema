#!/bin/bash

# Script para verificar pr√©-requisitos do sistema de reset PostgreSQL

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[CHECK] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

# Fun√ß√£o para verificar se Docker est√° instalado
check_docker() {
    log "Verificando Docker..."
    
    if command -v docker >/dev/null 2>&1; then
        local docker_version=$(docker --version 2>/dev/null)
        log "‚úÖ Docker encontrado: $docker_version"
    else
        error "‚ùå Docker n√£o encontrado ou n√£o instalado"
        info "   Instale o Docker antes de usar os scripts de reset"
        return 1
    fi
}

# Fun√ß√£o para verificar se Docker Compose est√° dispon√≠vel
check_docker_compose() {
    log "Verificando Docker Compose..."
    
    if docker compose version >/dev/null 2>&1; then
        local compose_version=$(docker compose version 2>/dev/null)
        log "‚úÖ Docker Compose encontrado: $compose_version"
    else
        error "‚ùå Docker Compose n√£o encontrado"
        info "   Instale Docker Compose antes de usar os scripts"
        return 1
    fi
}

# Fun√ß√£o para verificar arquivos de configura√ß√£o
check_config_files() {
    log "Verificando arquivos de configura√ß√£o..."
    
    # Verifica docker-compose.yml
    if [[ -f "docker-compose.yml" ]]; then
        log "‚úÖ docker-compose.yml encontrado"
        
        # Verifica se cont√©m servi√ßo db
        if grep -q "db:" docker-compose.yml; then
            log "‚úÖ Servi√ßo 'db' encontrado no docker-compose.yml"
        else
            warn "‚ö†Ô∏è Servi√ßo 'db' n√£o encontrado no docker-compose.yml"
        fi
        
        # Verifica se cont√©m volume postgres_data
        if grep -q "postgres_data:" docker-compose.yml; then
            log "‚úÖ Volume 'postgres_data' encontrado no docker-compose.yml"
        else
            warn "‚ö†Ô∏è Volume 'postgres_data' n√£o encontrado no docker-compose.yml"
        fi
    else
        error "‚ùå docker-compose.yml n√£o encontrado"
        return 1
    fi
    
    # Verifica Makefile
    if [[ -f "Makefile" ]]; then
        log "‚úÖ Makefile encontrado"
    else
        warn "‚ö†Ô∏è Makefile n√£o encontrado"
    fi
}

# Fun√ß√£o para verificar scripts
check_reset_scripts() {
    log "Verificando scripts de reset..."
    
    # Script de reset completo
    if [[ -f "scripts/reset_db.sh" ]]; then
        if [[ -x "scripts/reset_db.sh" ]]; then
            log "‚úÖ scripts/reset_db.sh encontrado e execut√°vel"
        else
            warn "‚ö†Ô∏è scripts/reset_db.sh encontrado mas n√£o √© execut√°vel"
            info "   Execute: chmod +x scripts/reset_db.sh"
        fi
    else
        error "‚ùå scripts/reset_db.sh n√£o encontrado"
        return 1
    fi
    
    # Script de reset l√≥gico
    if [[ -f "scripts/reset_db_logical.sh" ]]; then
        if [[ -x "scripts/reset_db_logical.sh" ]]; then
            log "‚úÖ scripts/reset_db_logical.sh encontrado e execut√°vel"
        else
            warn "‚ö†Ô∏è scripts/reset_db_logical.sh encontrado mas n√£o √© execut√°vel"
            info "   Execute: chmod +x scripts/reset_db_logical.sh"
        fi
    else
        error "‚ùå scripts/reset_db_logical.sh n√£o encontrado"
        return 1
    fi
}

# Fun√ß√£o para verificar comandos Make
check_make_commands() {
    log "Verificando comandos do Makefile..."
    
    if [[ -f "Makefile" ]]; then
        if grep -q "db-reset:" Makefile; then
            log "‚úÖ Comando 'make db-reset' dispon√≠vel"
        else
            error "‚ùå Comando 'make db-reset' n√£o encontrado no Makefile"
        fi
        
        if grep -q "db-reset-logical:" Makefile; then
            log "‚úÖ Comando 'make db-reset-logical' dispon√≠vel"
        else
            error "‚ùå Comando 'make db-reset-logical' n√£o encontrado no Makefile"
        fi
    fi
}

# Fun√ß√£o para verificar ambiente de desenvolvimento
check_dev_environment() {
    log "Verificando ambiente de desenvolvimento..."
    
    # Verifica vari√°veis de ambiente perigosas
    if [[ "$NODE_ENV" == "production" || "$ENVIRONMENT" == "production" ]]; then
        error "‚ùå Ambiente de PRODU√á√ÉO detectado!"
        info "   Os scripts de reset N√ÉO devem ser executados em produ√ß√£o"
        return 1
    fi
    
    # Verifica arquivo .env
    if [[ -f ".env" ]]; then
        if grep -q "NODE_ENV=production\|ENVIRONMENT=production" .env; then
            error "‚ùå Configura√ß√£o de produ√ß√£o encontrada no .env"
            return 1
        else
            log "‚úÖ Arquivo .env verificado (n√£o cont√©m config de produ√ß√£o)"
        fi
    else
        info "Arquivo .env n√£o encontrado (OK para desenvolvimento)"
    fi
    
    log "‚úÖ Ambiente parece ser de desenvolvimento"
}

# Fun√ß√£o para exibir guia de uso
show_usage_guide() {
    echo
    log "Guia de uso dos scripts de reset:"
    echo
    info "Comandos dispon√≠veis:"
    echo "  make db-reset         - Reset completo (remove volumes)"
    echo "  make db-reset-logical - Reset apenas dados (mant√©m cluster)"
    echo
    info "Scripts diretos:"
    echo "  ./scripts/reset_db.sh         - Reset completo com verifica√ß√µes"
    echo "  ./scripts/reset_db_logical.sh - Reset l√≥gico do database"
    echo
    warn "IMPORTANTE:"
    echo "  ‚Ä¢ Os resets s√£o DESTRUTIVOS e removem dados!"
    echo "  ‚Ä¢ Use APENAS em ambiente de desenvolvimento"
    echo "  ‚Ä¢ Sempre confirme antes de executar"
    echo "  ‚Ä¢ Fa√ßa backup se necess√°rio"
}

# Fun√ß√£o principal
main() {
    log "Verificando pr√©-requisitos para reset do PostgreSQL..."
    echo
    
    local errors=0
    
    # Verifica√ß√µes
    check_docker || errors=$((errors + 1))
    check_docker_compose || errors=$((errors + 1))
    check_config_files || errors=$((errors + 1))
    check_reset_scripts || errors=$((errors + 1))
    check_make_commands || errors=$((errors + 1))
    check_dev_environment || errors=$((errors + 1))
    
    echo
    
    if [[ $errors -eq 0 ]]; then
        log "üéâ Todos os pr√©-requisitos atendidos!"
        log "‚úÖ Sistema de reset PostgreSQL est√° pronto para uso"
        show_usage_guide
    else
        error "‚ùå $errors erro(s) encontrado(s)"
        info "Corrija os erros antes de usar os scripts de reset"
        return 1
    fi
}

# Executa se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
